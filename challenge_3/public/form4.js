class CompleteCheckout extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      shippingInfo: '',
      billingInfo: ''
    };
  }

  componentDidMount() {
    axios.get('/data', {
      params: {
        username: this.props.user
      }
    }).then(response => {
      console.log('get data', response.data);

      for (var key in response.data[0]) {
        this.setState({
          [key]: response.data[0][key]
        });
      }

      console.log(this.state);
    }).catch(err => {
      console.log('error', err);
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("h1", null, "Review Your Order"), React.createElement("br", null), React.createElement("div", null, React.createElement("span", null, "username: ", this.state.username), React.createElement("br", null), React.createElement("span", null, "email: ", this.state.email), React.createElement("br", null), React.createElement("h2", null, "Shipping Information"), Object.keys(this.state.shippingInfo).map(item => {
      return React.createElement("div", {
        key: item
      }, React.createElement("span", {
        key: item
      }, item, ": ", this.state.shippingInfo[item]), React.createElement("br", null));
    }), React.createElement("br", null), React.createElement("h2", null, "Billing Information"), Object.keys(this.state.billingInfo).map(item => {
      return React.createElement("div", {
        key: item
      }, React.createElement("span", {
        key: item
      }, item, ": ", this.state.billingInfo[item]), React.createElement("br", null));
    })), React.createElement("br", null), React.createElement("form", {
      method: "POST",
      action: "/",
      onSubmit: this.props.nextPage
    }, React.createElement("input", {
      type: "submit",
      value: "Purchase"
    })), React.createElement("br", null), React.createElement("button", {
      onClick: props.goBack
    }, "Back"));
  }

}

window.CompleteCheckout = CompleteCheckout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9mb3JtNC5qc3giXSwibmFtZXMiOlsiQ29tcGxldGVDaGVja291dCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwic2hpcHBpbmdJbmZvIiwiYmlsbGluZ0luZm8iLCJjb21wb25lbnREaWRNb3VudCIsImF4aW9zIiwiZ2V0IiwicGFyYW1zIiwidXNlcm5hbWUiLCJ1c2VyIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJrZXkiLCJzZXRTdGF0ZSIsImNhdGNoIiwiZXJyIiwicmVuZGVyIiwiZW1haWwiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiaXRlbSIsIm5leHRQYWdlIiwiZ29CYWNrIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxnQkFBTixTQUErQkMsS0FBSyxDQUFDQyxTQUFyQyxDQUErQztBQUM3Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxZQUFZLEVBQUUsRUFESDtBQUVYQyxNQUFBQSxXQUFXLEVBQUU7QUFGRixLQUFiO0FBSUQ7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCQyxJQUFBQSxLQUFLLENBQUNDLEdBQU4sQ0FBVSxPQUFWLEVBQW1CO0FBQ2pCQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsUUFBUSxFQUFFLEtBQUtSLEtBQUwsQ0FBV1M7QUFEZjtBQURTLEtBQW5CLEVBS0dDLElBTEgsQ0FLU0MsUUFBRCxJQUFjO0FBQ2xCQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCRixRQUFRLENBQUNHLElBQWpDOztBQUNBLFdBQUssSUFBSUMsR0FBVCxJQUFnQkosUUFBUSxDQUFDRyxJQUFULENBQWMsQ0FBZCxDQUFoQixFQUFrQztBQUNoQyxhQUFLRSxRQUFMLENBQWM7QUFDWixXQUFDRCxHQUFELEdBQU9KLFFBQVEsQ0FBQ0csSUFBVCxDQUFjLENBQWQsRUFBaUJDLEdBQWpCO0FBREssU0FBZDtBQUdEOztBQUNESCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLWixLQUFqQjtBQUNELEtBYkgsRUFjR2dCLEtBZEgsQ0FjVUMsR0FBRCxJQUFTO0FBQ2ROLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBcUJLLEdBQXJCO0FBQ0QsS0FoQkg7QUFpQkQ7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNQLFdBQ0UsaUNBQ0Usb0RBREYsRUFFRSwrQkFGRixFQUdFLGlDQUNFLGdEQUFpQixLQUFLbEIsS0FBTCxDQUFXTyxRQUE1QixDQURGLEVBRUUsK0JBRkYsRUFHRSw2Q0FBYyxLQUFLUCxLQUFMLENBQVdtQixLQUF6QixDQUhGLEVBSUUsK0JBSkYsRUFLRSx1REFMRixFQU1HQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLckIsS0FBTCxDQUFXQyxZQUF2QixFQUFxQ3FCLEdBQXJDLENBQTBDQyxJQUFELElBQVU7QUFDbEQsYUFBTztBQUFLLFFBQUEsR0FBRyxFQUFFQTtBQUFWLFNBQ0w7QUFBTSxRQUFBLEdBQUcsRUFBRUE7QUFBWCxTQUFrQkEsSUFBbEIsUUFBMEIsS0FBS3ZCLEtBQUwsQ0FBV0MsWUFBWCxDQUF3QnNCLElBQXhCLENBQTFCLENBREssRUFFTCwrQkFGSyxDQUFQO0FBSUQsS0FMQSxDQU5ILEVBWUUsK0JBWkYsRUFhRSxzREFiRixFQWNHSCxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLckIsS0FBTCxDQUFXRSxXQUF2QixFQUFvQ29CLEdBQXBDLENBQXlDQyxJQUFELElBQVU7QUFDakQsYUFBTztBQUFLLFFBQUEsR0FBRyxFQUFFQTtBQUFWLFNBQ1A7QUFBTSxRQUFBLEdBQUcsRUFBRUE7QUFBWCxTQUFrQkEsSUFBbEIsUUFBMEIsS0FBS3ZCLEtBQUwsQ0FBV0UsV0FBWCxDQUF1QnFCLElBQXZCLENBQTFCLENBRE8sRUFFUCwrQkFGTyxDQUFQO0FBSUQsS0FMQSxDQWRILENBSEYsRUF3QkUsK0JBeEJGLEVBeUJFO0FBQU0sTUFBQSxNQUFNLEVBQUMsTUFBYjtBQUFvQixNQUFBLE1BQU0sRUFBQyxHQUEzQjtBQUErQixNQUFBLFFBQVEsRUFBRSxLQUFLeEIsS0FBTCxDQUFXeUI7QUFBcEQsT0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLFFBQVo7QUFBcUIsTUFBQSxLQUFLLEVBQUM7QUFBM0IsTUFERixDQXpCRixFQTRCRSwrQkE1QkYsRUE2QkE7QUFBUSxNQUFBLE9BQU8sRUFBRXpCLEtBQUssQ0FBQzBCO0FBQXZCLGNBN0JBLENBREY7QUFpQ0Q7O0FBL0Q0Qzs7QUFtRS9DQyxNQUFNLENBQUMvQixnQkFBUCxHQUEwQkEsZ0JBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ29tcGxldGVDaGVja291dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNoaXBwaW5nSW5mbzogJycsXHJcbiAgICAgIGJpbGxpbmdJbmZvOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICBheGlvcy5nZXQoJy9kYXRhJywge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICB1c2VybmFtZTogdGhpcy5wcm9wcy51c2VyXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdnZXQgZGF0YScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiByZXNwb25zZS5kYXRhWzBdKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2tleV06IHJlc3BvbnNlLmRhdGFbMF1ba2V5XVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0ZSlcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLCBlcnIpXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxoMT5SZXZpZXcgWW91ciBPcmRlcjwvaDE+XHJcbiAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxzcGFuPnVzZXJuYW1lOiB7dGhpcy5zdGF0ZS51c2VybmFtZX08L3NwYW4+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxzcGFuPmVtYWlsOiB7dGhpcy5zdGF0ZS5lbWFpbH08L3NwYW4+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxoMj5TaGlwcGluZyBJbmZvcm1hdGlvbjwvaDI+XHJcbiAgICAgICAgICB7T2JqZWN0LmtleXModGhpcy5zdGF0ZS5zaGlwcGluZ0luZm8pLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l0ZW19PlxyXG4gICAgICAgICAgICAgIDxzcGFuIGtleT17aXRlbX0+e2l0ZW19OiB7dGhpcy5zdGF0ZS5zaGlwcGluZ0luZm9baXRlbV19PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8aDI+QmlsbGluZyBJbmZvcm1hdGlvbjwvaDI+XHJcbiAgICAgICAgICB7T2JqZWN0LmtleXModGhpcy5zdGF0ZS5iaWxsaW5nSW5mbykubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGtleT17aXRlbX0+XHJcbiAgICAgICAgICAgIDxzcGFuIGtleT17aXRlbX0+e2l0ZW19OiB7dGhpcy5zdGF0ZS5iaWxsaW5nSW5mb1tpdGVtXX08L3NwYW4+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnIgLz5cclxuICAgICAgICA8Zm9ybSBtZXRob2Q9J1BPU1QnIGFjdGlvbj0nLycgb25TdWJtaXQ9e3RoaXMucHJvcHMubmV4dFBhZ2V9PlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9J3N1Ym1pdCcgdmFsdWU9J1B1cmNoYXNlJyAvPlxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8YnIvPlxyXG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e3Byb3BzLmdvQmFja30+QmFjazwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcblxyXG53aW5kb3cuQ29tcGxldGVDaGVja291dCA9IENvbXBsZXRlQ2hlY2tvdXQ7Il19